.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_scripts_plot_ani.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_scripts_plot_ani.py:


Just testing how an animated plot turns out
===========================================



.. image:: /examples_scripts/images/sphx_glr_plot_ani_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    fig size: 100.0 DPI, size in inches [6.4 4.8]
    /home/atom/cvlab/thesis/cvlab_toolbox/examples/plot_ani.py:45: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      plt.show()






|


.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt
    import matplotlib.animation as animation

    import sys
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.animation import FuncAnimation

    fig, ax = plt.subplots()
    fig.set_tight_layout(True)

    # Query the figure's on-screen size and DPI. Note that when saving the figure to
    # a file, we need to provide a DPI for that separately.
    print('fig size: {0} DPI, size in inches {1}'.format(
        fig.get_dpi(), fig.get_size_inches()))

    # Plot a scatter that persists (isn't redrawn) and the initial line.
    x = np.arange(0, 20, 0.1)
    ax.scatter(x, x + np.random.normal(0, 3.0, len(x)))
    line, = ax.plot(x, x - 5, 'r-', linewidth=2)

    def update(i):
        label = 'timestep {0}'.format(i)
        print(label)
        # Update the line and the axes (with a new xlabel). Return a tuple of
        # "artists" that have to be redrawn for this frame.
        line.set_ydata(x - 5 + i)
        ax.set_xlabel(label)
        return line, ax

    if __name__ == '__main__':
        # FuncAnimation will call the 'update' function for each frame; here
        # animating over 10 frames, with an interval of 200ms between frames.
        anim = FuncAnimation(fig, update, frames=np.arange(0, 10), interval=200)
        if len(sys.argv) > 1 and sys.argv[1] == 'save':
            anim.save('line.gif', dpi=80, writer='imagemagick')
        else:
            # plt.show() will just loop the animation forever.
            plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.269 seconds)


.. _sphx_glr_download_examples_scripts_plot_ani.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ani.py <plot_ani.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ani.ipynb <plot_ani.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
